### Utililties for keycloak
kc_login() {
  local user=$1
  local password=$1
  ${KCADM} config credentials --server http://localhost:8080/auth --realm master --user ${user} --password ${password}
}

kc_login_by_service_account() {
  local client=$1
  local secret=$1
  ${KCADM} config credentials --server http://localhost:8080/auth --realm ${REALM} --client ${CLIENT_ADMIN} --secret ${CLIENT_ADMIN_SECRET}
}

kc_realm_create() {
  ${KCADM} create realms -s realm=${REALM} -s enabled=true
}

kc_user_get() {
  local username=$1

  $KCADM get -r ${REALM} users -q username=${username} | jq .[]
}

kc_user_create() {
  local username=$1
  local password=$2

  ${KCADM} create users -r ${REALM} -s username=${username} -s enabled=true -s emailVerified=true
  ${KCADM} set-password  -r ${REALM} --username ${username} --new-password=${password}
}

kc_client_get() {
  local client=$1

  $KCADM get -r $REALM clients -q clientId=$client | jq .[]
}

kc_client_secret() {
  local client_id=$1

  $KCADM get -r $REALM "clients/$client_id/client-secret" | jq -r .value
  return ${PIPESTATUS[0]}
}

kc_client_create() {
  local client=$1
  local client_file=$2

  $KCADM create clients \
    -r $REALM \
    -s clientId=$client \
    -f - \
    --output \
  < $client_file
}

kc_add_role() {
  local username=$1
  local role=$2

  $KCADM add-roles \
      -r $REALM \
      --uusername $username \
      --rolename $role
}

kc_add_client_role() {
  local username=$1
  local client=$2
  local role=$3

  $KCADM add-roles \
      -r $REALM \
      --uusername $username \
      --cclientid $client \
      --rolename $role
}

kc_client_add_mapper() {
  local client_id=$1
  local mapper=$2

  echo $mapper | $KCADM create "clients/$client_id/protocol-mappers/models" -r $REALM -f - 2> /dev/null
}

kc_client_add_redirect_uri() {
  local client_id=$1
  local redirect_uri=$2

  $KCADM update "clients/$client_id" \
      -r $REALM \
      -s "redirectUris+=${redirect_uri}" \
      2> /dev/null
}

##### Idempotent Functions
apply_client() {
  local client=$1
  local client_file=$2

  if [[ $# -gt 2 ]]; then
    local redirect_uri=$3
  fi

  local client_data=$(kc_client_get $client)

  echo "create client if not exists"
  if [[ -z $client_data ]]; then
    # create
    client_data=$(kc_client_create $client $client_file)
  fi
  local client_id=$(echo $client_data | jq -r .id)

  # Add protocol mappers
  for mapper in $(cat $client_file | jq -c '.protocolMappers // [] | .[]'); do
    local mapper_name=$(echo $mapper | jq -r .name)
    local len=$(echo $client_data | jq ".protocolMappers // [] | map(select(.name == \"${mapper_name}\")) | length")
    if [[ $len == '0' ]]; then
      echo "add protomapper $mapper_name for $client"
      kc_client_add_mapper $client_id $mapper
    fi
  done

  # Add redirect uris
  if [[ -n $redirect_uri ]]; then
    local len=$(echo $client_data | jq ".redirectUris // [] | map(select(. == \"${redirect_uri}\")) | length")
    if [[ $len == '0' ]]; then
      echo "add redirect-uri $redirect_uri for $client"
      kc_client_add_redirect_uri $client_id $redirect_uri
    fi
  fi
}

apply_client_role() {
  local client=$1
  local username="service-account-$1"
  local role_file=$2
  echo "apply roles for client $client"

  # realm roles
  for role in $(jq -r ".realmRoles // [] | .[]" $role_file); do
    echo "[$client] add role $role"
    kc_add_role $username $role
  done

  # client roles
  for target_client in $(jq -r '.clientRoles // [] | keys | .[]' $role_file); do
    for role in $(jq -r ".clientRoles[\"${target_client}\"][]" $role_file); do
      echo "[$client] add role ${target_client}/${role}"
      kc_add_client_role $username $target_client $role
    done
  done
}

apply_user() {
  local username=$1
  local password=$2

  echo "apply user ${username}"
  if [[ -z $(kc_user_get ${username}) ]]; then

    kc_user_create $username $password
    echo "${username} added"
  fi
}

